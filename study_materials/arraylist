ARRAYLIST: DIF DATATYPES CAN BE STORED

-Used to store dynamically sized collection of elements.
-Contrary to Arrays that are fixed in size, an ArrayList grows its size automatically when new elements are added to it.
-It is a re-sizable array, also called a dynamic array.

SYNTAX:ArrayList a = new ArrayList();
      a->is a reference to an ArrayList that holds references to objects.

USE OF ARRAYLIST:
    -store a dynamically sized collection of elements.
    -It is initialized by a size. However, the size can increase if the collection grows, and shrunk if objects are removed from the collection.
    -randomly access the list.

MY EXAMPLE:

package org.example;
import java.util.*;
public class App
{
    public static void main(String[] args)
    {
        ArrayList a = new ArrayList();
        a.add(5);
        a.add("Apple");
        a.add(2.3);
        System.out.println(a);
    }
}
o/p : [5, Apple, 2.3]

if SOP is given in for loop o/P will be like this:

for(int i=0;i<3;i++)
        System.out.println(a);
     o/p:
        [5, Apple, 2.3]
        [5, Apple, 2.3]
        [5, Apple, 2.3]

ARRAYLIST METHODS:
   void add(int index,object element)
   void clear()
   void trimToSize()
   int indexOf(object obj)
   object clone()
   object[] to aray()
   object remove(int index)
   int size()

void add(int index,object element)

package org.example;
import java.util.*;
public class App
{
 public static void main( String[] args )
 {
     ArrayList a=new ArrayList();
     a.add(5);
     a.add("Apple");
     a.add(2.3);
     System.out.println("before adding" + a);
     a.add(2,"new_element");
     System.out.println("after adding" +a);
 }
} o/p:
      before adding:[5, Apple, 2.3]
      after adding:[5, Apple, new_element, 2.3]

void clear()-remove all elements

package org.example;
import java.util.*;
public class App
{
    public static void main( String[] args )
    {
        ArrayList a=new ArrayList();
        a.add(5);
        a.add("Apple");
        a.add(2.3);
        System.out.println("before clear"+" "+a);
        a.clear();
        System.out.println("after clear"+" "+a);
    }
}
o/p:
   before clear [5, Apple, 2.3]
   after clear []

 void trimToSize()
