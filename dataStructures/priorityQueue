PriorityQueue:
 when elements are processed based on the priority.
 i/p:
 [array of characters]- w,y,a,d,q-->a,d,q,w,y
 priority based on ASCII values.
Application:
 Dijkstra's Algorithm
 USE: always give smallest element when we poll.
 i/p:
 4 1 8 3 5 6
 store as 1.....(first elt is alwys smallest..remaining elements in any order)
poll()-1(o/p) [3,4,8,5,6] (remaining)
poll()-3      [4,8,5,6] (remaining)
poll()-4      [5,8,6] (remaining)
poll()-5      [6,8] (remaining)


package collections;
import java.util.*;
import java.io.*;
import java.lang.*;
public class PriorityQueueExample
{
    public static void main(String[] args)
    {
        /*
    PriorityQueue p1=new PriorityQueue();
    p1.add(1);
    p1.add(3);
    p1.add(2);
    p1.offer(5);
    p1.remove(3); //delete specific element
    p1.poll();      //delete 1st element
    Iterator i=p1.iterator();
    while(i.hasNext())
    {
        System.out.println(i.next());
    }
    */

    //whenever we poll smallest element will be retrived
         PriorityQueue p2=new PriorityQueue();
    p2.add(4);
    p2.add(1);
    p2.add(8);
    p2.add(3);
    p2.add(5);
    p2.add(6);
    System.out.println(p2.poll());
    System.out.println(p2.poll());
    System.out.println(p2.poll());
    System.out.println(p2.poll());
    System.out.println(p2.poll());
    }
}
