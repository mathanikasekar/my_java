package collections;
import java.util.Scanner;
class Node        //like structure in c,here class in java
{
    int data;
    Node left, right;
}
class Bst
{
    public Node insert(Node root, int data)
    {
       if(root ==null)                         //if root is null,there is no elements.so we create newnode
           return createNode(data);
       else if(data< root.data)               //if current element lesser than root,insert it on the leftside
          root.left=insert(root.left,data);
       else
          root.right=insert(root.right,data); //if current element greater than root,insert it on the rightside
       return root;
    }
     public Node createNode(int value)
    {
        Node newNode=new Node();  //creating newNode
        newNode.data = value;
        newNode.left = null;
        newNode.right = null;
        return newNode;
    }

        public void inorderTraversal(Node node) {

            //Check whether tree is empty
            if(node == null){
                System.out.println("Tree is empty");
                return;
            }
            else {

                if(node.left!= null)
                    inorderTraversal(node.left);
                System.out.print(node.data + " ");
                if(node.right!= null)
                    inorderTraversal(node.right);

            }
        }
    }
public class BinaryTree
{
    public static void main(String[] args)
    {
        Node root=null;                     //root node
        Bst bst=new Bst();
        root=bst.insert(root,10);
        root=bst.insert(root,20);
        root=bst.insert(root,30);
        root=bst.insert(root,40);
        root=bst.insert(root,50);
        bst.inorderTraversal(root);
    }
}
